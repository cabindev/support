generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  firstName           String
  lastName            String
  email               String         @unique
  password            String
  image               String?
  role                Role           @default(MEMBER)
  emailVerified       DateTime?
  resetToken          String?        @unique
  resetTokenCreatedAt DateTime?
  resetTokenExpiresAt DateTime?
  lastPasswordReset   DateTime?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  mediaRequests       MediaRequest[]
  orders              Order[]
  verifiedSlips       PaymentSlip[]  @relation("SlipVerifier")

  @@index([email])
  @@index([role])
}

model MediaRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  subject     String
  message     String
  filePath    String?
  createdAt   DateTime @default(now())
  phoneNumber String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AnnounceResult {
  id            String      @id @default(cuid())
  procurementId String
  pdfFile       String?
  announcedDate DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  procurement   Procurement @relation(fields: [procurementId], references: [id], onDelete: Cascade)

  @@index([procurementId])
}

model Procurement {
  id              String            @id @default(cuid())
  projectCode     String            @unique
  title           String
  description     String
  coverImage      String?
  pdfFile         String?
  startDate       DateTime
  endDate         DateTime
  status          ProcurementStatus
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  announceResults AnnounceResult[]

  @@index([status])
  @@index([startDate, endDate])
}

model StoreCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([name])
}

model Size {
  id           String        @id @default(cuid())
  name         String        @unique
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  productSizes ProductSize[]

  @@index([name])
}

model ProductSize {
  id        String     @id @default(cuid())
  productId String
  sizeId    String
  stock     Int        @default(0)
  preorders Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      Size       @relation(fields: [sizeId], references: [id])

  @@unique([productId, sizeId])
  @@index([productId])
  @@index([sizeId])
  @@index([stock])
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String         @db.Text
  price       Decimal        @db.Decimal(10, 2)
  stock       Int
  categoryId  String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  status      ProductStatus  @default(NORMAL)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    StoreCategory  @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  sizes       ProductSize[]

  @@index([categoryId])
  @@index([name])
  @@index([stock])
  @@index([status])
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isCover   Boolean  @default(false)
  sortOrder Int      @default(0)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([isCover])
}

model ShippingAddress {
  id        String   @id @default(cuid())
  orderId   String   @unique
  name      String
  phone     String
  address   String
  district  String
  amphoe    String
  province  String
  zipcode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model BankAccount {
  id            String   @id @default(cuid())
  bankName      String
  accountNumber String
  accountName   String
  branch        String
  promptpay     String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id            String           @id @default(cuid())
  userId        Int?
  totalAmount   Decimal          @db.Decimal(10, 2)
  status        OrderStatus      @default(PENDING)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  paymentMethod PaymentMethod    @default(BANK_TRANSFER)
  user          User?            @relation(fields: [userId], references: [id], onDelete: Restrict)
  items         OrderItem[]
  paymentSlip   PaymentSlip?
  shippingInfo  ShippingAddress?

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model PaymentSlip {
  id          String     @id @default(cuid())
  orderId     String     @unique
  originalUrl String
  verified    Boolean    @default(false)
  verifiedAt  DateTime?
  verifiedBy  Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      SlipStatus @default(PENDING)
  uploadedAt  DateTime   @default(now())
  order       Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  verifier    User?      @relation("SlipVerifier", fields: [verifiedBy], references: [id])

  @@index([orderId])
  @@index([verifiedBy])
  @@index([verified])
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  @@index([createdAt])
}

model CartItem {
  id          String      @id @default(cuid())
  cartId      String
  productId   String
  quantity    Int
  price       Decimal     @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  sizeId      String
  cart        Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])
  productSize ProductSize @relation(fields: [productId, sizeId], references: [productId, sizeId])

  @@index([cartId])
  @@index([productId])
  @@index([productId, sizeId])
}

enum Role {
  MEMBER
  ADMIN
}

enum ProcurementStatus {
  DRAFT
  OPEN
  CLOSED
  CANCELLED
}

enum ProductStatus {
  NORMAL
  PREORDER
  NEW
}

enum PaymentMethod {
  BANK_TRANSFER
  PROMPTPAY
}

enum SlipStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PAID
  VERIFIED
  CANCELLED
}
